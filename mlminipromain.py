# -*- coding: utf-8 -*-
"""mlminipromain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1piUE2sI9H9jRYT7Fy0-SNlJvCTEz3Bfc
"""

# Install required packages
!pip install ultralytics==8.0.196
!pip install telebot
from google.colab import drive
drive.mount('/content/drive')
from IPython import display
display.clear_output()

# Import required libraries
import ultralytics
ultralytics.checks()
from ultralytics import YOLO
import telebot
import shutil
import os
import glob
from telebot import types

# Define the bot token
BOT_TOKEN = '7960191164:AAE9XMnEFQ4srVrzHaqqLc8RBjgN3_QBcmI'  # Replace with your actual bot token
bot = telebot.TeleBot(BOT_TOKEN)

# Handler for photo messages
@bot.message_handler(content_types=['photo'])
def echo_photo(message):
    print("Image Received")
    photo = message.photo[-1]  # Get the photo ID of the largest available photo
    process_media(message, photo)

# Handler for video messages
@bot.message_handler(content_types=['video'])
def echo_video(message):
    print("Video Received")
    video = message.video  # Get the video ID
    process_media(message, video)

# Process the media (photo or video)
def process_media(message, media):
    # Download the media file
    media_info = bot.get_file(media.file_id)
    media_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{media_info.file_path}"

    # Define folders and paths
    save_folder = "saved_media"
    try:
        shutil.rmtree("/content/saved_media", ignore_errors=True)
        shutil.rmtree("/content/runs/detect/predict", ignore_errors=True)
    except Exception as e:
        print(f"Error while removing directories: {e}")

    # Create folders if they do not exist
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)

    # Set the filename and download the file
    media_filename = f"{message.from_user.id}_{message.message_id}.mp4" if message.content_type == 'video' else f"{message.from_user.id}_{message.message_id}.jpg"
    media_path = os.path.join(save_folder, media_filename)

    os.system(f"wget -O {media_path} {media_url}")

    # Run YOLO object detection
    yolo_command = "yolo task=detect mode=predict model=/content/drive/MyDrive/best7.pt conf=0.25 source='saved_media' save=True"
    print(f"Running YOLO command: {yolo_command}")
    os.system(yolo_command)

    # Check for processed files
    processed_files = glob.glob("/content/runs/detect/predict/*")
    if processed_files:
        final_media_path = processed_files[0]  # Use the first detected file
        with open(final_media_path, 'rb') as media_file:
            if message.content_type == 'video':
                bot.send_video(message.chat.id, media_file)
            else:
                bot.send_photo(message.chat.id, media_file)
        bot.reply_to(message, "Object detection completed successfully!")
    else:
        bot.reply_to(message, "Object detection failed. No output file generated.")

# Handler for text messages
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    bot.reply_to(message, "Please send an image or a video for object detection.")

# Start the bot
if __name__ == "__main__":
    print("Bot is running...")
    bot.polling(none_stop=True)

